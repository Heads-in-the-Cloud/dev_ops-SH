pipeline {
  agent { node { label "aws-ready" } }

  environment {
      ECS_CONTEXT_NAME = "aws_ecs-sh"
      ORG_ECR_URI = "${ORG_ACCOUNT_NUM}.dkr.ecr.${region}.amazonaws.com"
      SECRET_ID = "dev/SeanH/utopia-secrets"
      COMPOSE_FILE = "jenkins-docker-compose/docker-compose.yml"
  }

  stages {

    stage('Setup parameters') {
      steps {
        script {
          properties([
            parameters([
              [$class: 'ChoiceParameter', 
                choiceType: 'PT_SINGLE_SELECT', 
                description: 'Starting or stopping the cluster?', 
                filterLength: 1, 
                filterable: false, 
                name: 'action', 
                script: [
                  $class: 'GroovyScript', 
                  fallbackScript: [
                      classpath: [], 
                      sandbox: false, 
                      script: 
                          "return['Could not load actions']"
                  ], 
                  script: [
                      classpath: [], 
                      sandbox: false, 
                      script: 
                          "return['start','stop']"
                  ]
                ]
              ],
              [$class: 'CascadeChoiceParameter', 
                choiceType: 'PT_SINGLE_SELECT', 
                description: 'Development or Production environment?',
                name: 'environment', 
                referencedParameters: 'action', 
                script: [
                  $class: 'GroovyScript', 
                  fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: "return['Couldn't get operational environment from parameters']"
                  ], 
                  script: [
                    classpath: [], 
                    sandbox: false, 
                    script: '''
                    if(action.equals("start")){
                        return["dev","prod"]
                    }
                    '''
                  ] 
                ]
              ]
            ])
          ])
        }
      }
    }

    stage("Environment Loading") {
      steps {
        echo "Loading environmental variables from AWS Secrets..."
        // script {
        //   withCredentials([
        //     string(credentialsId: env.SECRET_ID,
        //     variable: "UtopiaCreds")
        //   ]) {
        //     def jsonObj = readJSON text; UtopiaCreds
        //     env.SECRET_KEY = jsonObj.SECRET_KEY
        //     env.USERNAME = jsonObj.DB_USERNAME
        //     env.PASSWORD = jsonObj.DB_PASSWORD
        //     env.RDS_INST = jsonObj.RDS_INST
        //     env.DB_ACCESS_URI = "${USERNAME}:${PASSWORD}@${RDS_INST}"
        //   }
        // }
      }
    }

    stage("AWS ECR Private Repo Login") {
      when { expression { return params.action =='start' } }
      steps {
        echo "Logging in to the organization\'s private ECR repos..."
        sh "aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ORG_ECR_REPO"
      }
    }

    stage("Docker-Compose Set-Up") {
      when { expression { return params.action =='start' } }
      steps {
        echo "Setting up Docker context and getting repo credentials..."
        sh "docker context use ${ECS_CONTEXT_NAME}"
        sh "aws ecr get-login-password --region ${region} |docker login --username AWS --password-stdin ${ORG_ECR_URI}"
      }
    }

    stage("Docker-Compose Deployment") {
      when { expression { return params.action =='start' } }
      steps {
        echo "Bringing services online..."
        dir("jenkins_docker_compose") {
          sh "docker compose up"
        }
      }
    }

    stage("Docker-Compose Running") {
      steps {
        echo "Printing running services..."
        dir("jenkins_docker_compose") {
          sh "docker compose ps"
        }
      }
    }

    stage("Docker-Compose Take Down") {
      steps {
        when { expression { return params.action =='stop' } }
        echo "Bringing services down..."
        dir("jenkins_docker_compose") {
          sh "docker compose down"
        }
        sh "docker context use default"
      }
    }
  }
}